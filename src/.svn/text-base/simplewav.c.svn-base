/**    
    @file soundfile.c
    @brief Simple functions for reading and writing 16-bit WAV files. Only needed of libsndfile not being used.
    @author John Williamson
    
    Copyright (c) 2011 All rights reserved.
    Licensed under the BSD 3 clause license. See COPYING.
    
    This file is part of the OpenGrain distribution.
    http://opengrain.sourceforge.net   
*/              


#include <string.h>
#include "soundfile.h"
#include "simplewav.h"
#include "wavereader.h"
#include "wavewriter.h"



// load a wavefile from fname
struct WaveSound *soundfile_load(char *fname)
{
    FILE *wavfile;
    unsigned char *data;
    unsigned char header[44];
    WaveSound *sound;
    int frames, n_channels, sample_rate, bytes, format, depth;
    wavfile = fopen(fname, "rb");
    
    if(!wavfile)
    {
        opengrain_warning("File %s does not exist", fname);
        return NULL;
    }
        
    // read the header
    fread(&header[0], 44, 1, wavfile);
    
    // check it's really a wav file
    if(header[0]!='R' || header[1]!='I' || header[2]!='F' || header[3]!='F')    
    {
        opengrain_warning("Not a RIFF WAV file");
        return NULL;
    }
        
    
    format = get_little_endian(&header[20], 2);
    
    
    // check the format is PCM
    if(format!=1)
    {
        opengrain_warning("Not a PCM WAV file");
        return NULL;
    }
        
    n_channels = get_little_endian(&header[22], 2);
    bytes = get_little_endian(&header[40], 4);
    sample_rate = get_little_endian(&header[24], 4);
    depth = get_little_endian(&header[34], 2);
    
    
    
    frames = bytes / (2*n_channels);
    
    // only 16 bit values supported!
    if(depth!=16)
    {
        opengrain_warning("WAV file not 16 bit");
        return NULL;
    }
        
    // read the raw data
    data = malloc(bytes);
    fread(data, bytes, 1, wavfile);
            
    // get the WaveSound
    sound = wave_sound_from_raw((void*)data, frames, n_channels, sample_rate, PCM_SIGNED_16);
        
    return sound;
}




// write a little endian value into a block
void little_endian(unsigned char *data, int n_bytes, int x)
{
    int i;    
    for(i=0;i<n_bytes;i++)
    {
        data[i] = (x&255);
        x>>=8;
    }
}


// get a little endian value 
int get_little_endian(unsigned char *data, int n_bytes)
{
    int i,x;    
    x = 0;
    for(i=0;i<n_bytes;i++)
    {
        x<<=8;
        x += data[n_bytes-i-1];        
    }
    return x;
}

// open a wavefile for writing from the given wavewriter specification
void *soundfile_open(int channels, int sample_rate, int bit_depth, int overwrite_mode, char *output_path_name)
{
   SimpleWavInfo *info;
   info = malloc(sizeof(*info));
   
   info->n_channels = channels;        
   info->sample_rate = sample_rate;   
   //ignores append mode
   soundfile_sub_open(info, output_path_name);
   return info;
}

// open a wavefile for writing
void soundfile_sub_open(void *ptr, char *fname)
{
    SimpleWavInfo *info = ptr;
    
    
    info->wavfile = fopen(fname, "wb");
    if(!info->wavfile)
    {
        opengrain_error("Could not open %s for writing", fname);
        info->wavfile = NULL;
        return;
    }
    
    info->frames = 0;
    info->output_buffer = malloc(GLOBAL_STATE.frames_per_buffer * 2);
    info->output_ptr = 0;
    info->output_len = GLOBAL_STATE.frames_per_buffer * 2;    
    
        
    memcpy(&info->header[0], "RIFF", 4); // RIFF
    little_endian(&info->header[4], 4, 36); // number of bytes in this file + 36
    memcpy(&info->header[8], "WAVE", 4); // WAVE
    memcpy(&info->header[12],"fmt ",4); // fmt           
    little_endian(&info->header[16], 4, 16); // Subchunk 1 size: PCM = 16
    little_endian(&info->header[20], 2, 1);  // Format 1: for PCM
    little_endian(&info->header[22], 2, info->n_channels); // channels
    little_endian(&info->header[24], 4, info->sample_rate); // sample rate
    little_endian(&info->header[28], 4, info->sample_rate*info->n_channels*2); // byte rate
    little_endian(&info->header[32], 2, info->n_channels*2); // block align
    little_endian(&info->header[34], 2, 16); // bit depth
    memcpy(&info->header[36], "data",4);
    little_endian(&info->header[40], 4, 0); // number of bytes in this file    
    fwrite(info->header, 44, 1, info->wavfile);        
    
    
}


// write a block of data to a wave file
void soundfile_write(void *ptr, float *data, int n)
{
    SimpleWavInfo *info = ptr;
    int i;
    double x;

    for(i=0;i<n;i++)
    {
      x = data[i];
      // clip
      if(x>=0.999999)
        x = 0.999999;
      if(x<=-0.999999)
        x = -0.999999;
        
      // scale
      x *= 32767;
            
      // update buffer
      little_endian(&info->output_buffer[info->output_ptr], 2, (int)x);         
      
      info->output_total+=2;
      info->output_ptr+=2;
    
      // write buffer if it's time
      if(info->output_ptr >= info->output_len)
      {
        fwrite(info->output_buffer, 1, info->output_ptr, info->wavfile);
        info->output_ptr = 0;
      }
      
    }    
}




void soundfile_sync(void *ptr)
{    
    SimpleWavInfo *info = ptr;
    // update header
    fseek(info->wavfile, SEEK_SET, 0);
    little_endian(&info->header[4], 4, 36+info->output_total); // number of bytes in this file + 36
    little_endian(&info->header[40], 4, info->output_total); // number of bytes in this file   
    fwrite(info->header, 44, 1, info->wavfile);

    // jump back to the end of the file
    fseek(info->wavfile, SEEK_END, 0);

}


// Synchronise to disk and close the file handle
// free the info structure
void soundfile_stop(void *ptr)
{
    SimpleWavInfo *info = ptr;
    soundfile_sync(info);
    free(info->output_buffer);
    fclose(info->wavfile);       
}
